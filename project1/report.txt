1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<9>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between <<< and >>> signs below (eg, <<<3>>>).

   <<<3>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Array Percolation)
       Approach: I started by filling out the instance variables, the constructor and the getters
       (numberOfOpenSites() and isOpen(i,j)). In my opinion, this problem was pretty simple and I
       just followed the project statement pdf.

       Issues and resolution: It wasn't an issue more than a question. There were 3 places where I
       was using a large if statement to check out of bounds on i and j (isOpen, open, and isFull).
       I wanted to create a small helper method to do this check and then I could just call it each
       time (in order to minimize the chance of errors). Am I allowed to add helper methods in my
       projects (I assumed it is mandatory to make some for the backwash problem in the next
       section, which I hadn't gotten to at this point)?

   Problem 2 (Union Find Percolation)
       Approach: This one was quite difficult for me. Like the last problem, I started the problem
       by doing the stuff I thought was easy (instance variables, the constructor, and the getters).
       After that, I stopped and tried to understand how the union find percolation system works in
       order to fill out the body for encode(). I drew out the diagram from the problem statement
       and found the formula. I drew a different sized percolation system to confirm my formula. I
       took a while with the open method (I will talk about it below) and quickly got the rest done.

       Issues and resolution: As I mentioned above, I took a while to fill out the open method. The
       main issue is that I had assumed that I could just call isOpen on all the neighbors. I
       realized that when you get to sites that are on the edges of the system, you would end up
       throwing an exception depending on which direction you look. I ended up adding a small check
       before isOpen in the if statement for the border sites. I'm not sure if there's a better way
       to do it or if I misinterpreted what the method does. As of this point, I haven't figured out
        the backwash problem yet but I am getting back to it after I turn everything else first so I
         can at least get some points.

   Problem 3 (Estimation of Percolation Threshold)
       Approach: This one was simple as well. I just followed the instructions and copied the
       formulas using the given libraries.

       Issues and resolution: The only thing is that when I went to test in the command line with
       the parameters n=100 and m=1000 like in the problem statement, I was getting results that
       were 0.001 different from the example. I'm pretty sure this is a casting issue but I went
       through and checked all my data types (doubles, integers, all the mixed-type arithmetic) and
       I can't seem to find the source of the slight difference.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS210 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   I liked this project because it wasn't too easy but difficult enough to force me to think a lot
   about the problems. As a first project, this is quite good.
